{
  "id": 0,
  "task_name": "academia",
  "goal": "How many mutual collaborators do Florian Kirchbuchner and Fadi Boutros share? Please give me a numerical value as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "How many mutual collaborators do Florian Kirchbuchner and Fadi Boutros share? Please give me a numerical value as an answer.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: How many mutual collaborators do Florian Kirchbuchner and Fadi Boutros share? Please give me a numerical value as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 1,
  "task_name": "academia",
  "goal": "Which paper by Lazhar Labiod has the most citations in the DBLP citation network?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which paper by Lazhar Labiod has the most citations in the DBLP citation network?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which paper by Lazhar Labiod has the most citations in the DBLP citation network?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 2,
  "task_name": "academia",
  "goal": "Who are the co-authors with whom Lazhar Labiod has written the paper that has the highest number of citations in the DBLP citation network? Please answer in the form of a list ['author1', 'author2', ...].",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Who are the co-authors with whom Lazhar Labiod has written the paper that has the highest number of citations in the DBLP citation network? Please answer in the form of a list ['author1', 'author2', ...].",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Who are the co-authors with whom Lazhar Labiod has written the paper that has the highest number of citations in the DBLP citation network? Please answer in the form of a list ['author1', 'author2', ...].\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 3,
  "task_name": "academia",
  "goal": "In the DBLP citation network, which venue has the most publications by Andrea Omicini?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "In the DBLP citation network, which venue has the most publications by Andrea Omicini?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: In the DBLP citation network, which venue has the most publications by Andrea Omicini?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 4,
  "task_name": "academia",
  "goal": "How many citations do papers co-authored by Florian Kirchbuchner and Fadi Boutros have in the DBLP citation network? Please give me a numerical value as an answer.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "How many citations do papers co-authored by Florian Kirchbuchner and Fadi Boutros have in the DBLP citation network? Please give me a numerical value as an answer.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: How many citations do papers co-authored by Florian Kirchbuchner and Fadi Boutros have in the DBLP citation network? Please give me a numerical value as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 5,
  "task_name": "academia",
  "goal": "Who has the most collaborations with Lazhar Labiod in the DBLP citation network?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Who has the most collaborations with Lazhar Labiod in the DBLP citation network?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Who has the most collaborations with Lazhar Labiod in the DBLP citation network?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 6,
  "task_name": "academia",
  "goal": "Which organizations were involved in the research titled 'mToFNet: Object Anti-Spoofing with Mobile Time-of-Flight Data'? Please answer in the form of a list ['org1', 'org2', ...]",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which organizations were involved in the research titled 'mToFNet: Object Anti-Spoofing with Mobile Time-of-Flight Data'? Please answer in the form of a list ['org1', 'org2', ...]",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which organizations were involved in the research titled 'mToFNet: Object Anti-Spoofing with Mobile Time-of-Flight Data'? Please answer in the form of a list ['org1', 'org2', ...]\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 7,
  "task_name": "academia",
  "goal": "Which keyword does Correia Miguel emphasize most frequently in the DBLP citation network?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which keyword does Correia Miguel emphasize most frequently in the DBLP citation network?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which keyword does Correia Miguel emphasize most frequently in the DBLP citation network?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 8,
  "task_name": "academia",
  "goal": "Who wrote the paper titled 'Density Ratio Estimation via Infinitesimal Classification'? Please answer in the form of a list ['author1', 'author2', ...].",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Who wrote the paper titled 'Density Ratio Estimation via Infinitesimal Classification'? Please answer in the form of a list ['author1', 'author2', ...].",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Who wrote the paper titled 'Density Ratio Estimation via Infinitesimal Classification'? Please answer in the form of a list ['author1', 'author2', ...].\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 9,
  "task_name": "academia",
  "goal": "Do the authors of 'Decoupled Dynamic Spatial-Temporal Graph Neural Network for Traffic Forecasting._2' and 'Evolutionary Clustering of Moving Objects' have any overlap? Please respond with 'Yes' or 'No'.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Do the authors of 'Decoupled Dynamic Spatial-Temporal Graph Neural Network for Traffic Forecasting._2' and 'Evolutionary Clustering of Moving Objects' have any overlap? Please respond with 'Yes' or 'No'.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Do the authors of 'Decoupled Dynamic Spatial-Temporal Graph Neural Network for Traffic Forecasting._2' and 'Evolutionary Clustering of Moving Objects' have any overlap? Please respond with 'Yes' or 'No'.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 10,
  "task_name": "academia",
  "goal": "Which organizations is Yilun Zhou affiliated with?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which organizations is Yilun Zhou affiliated with?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which organizations is Yilun Zhou affiliated with?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 11,
  "task_name": "academia",
  "goal": "Is Tonghan Wang_2 affiliated with the same organization as Zeyang Zhang? Please answer 'Yes' or 'No'.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is Tonghan Wang_2 affiliated with the same organization as Zeyang Zhang? Please answer 'Yes' or 'No'.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Is Tonghan Wang_2 affiliated with the same organization as Zeyang Zhang? Please answer 'Yes' or 'No'.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 12,
  "task_name": "academia",
  "goal": "How many papers within the DBLP citation network reference the work titled 'Joint extraction of entities and overlapping relations by improved graph convolutional networks'? Please give me a numerical value as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "How many papers within the DBLP citation network reference the work titled 'Joint extraction of entities and overlapping relations by improved graph convolutional networks'? Please give me a numerical value as an answer.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: How many papers within the DBLP citation network reference the work titled 'Joint extraction of entities and overlapping relations by improved graph convolutional networks'? Please give me a numerical value as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 13,
  "task_name": "academia",
  "goal": "Which paper has received more citations: 'Stability and Risk Bounds of Iterative Hard Thresholding' or 'Compressive Wideband Spectrum Sensing and Signal Recovery With Unknown Multipath Channels'?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which paper has received more citations: 'Stability and Risk Bounds of Iterative Hard Thresholding' or 'Compressive Wideband Spectrum Sensing and Signal Recovery With Unknown Multipath Channels'?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which paper has received more citations: 'Stability and Risk Bounds of Iterative Hard Thresholding' or 'Compressive Wideband Spectrum Sensing and Signal Recovery With Unknown Multipath Channels'?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 14,
  "task_name": "academia",
  "goal": "Which paper was published first: 'Topology optimization of structures undergoing brittle fracture' or 'Classification Model for IDS Using Auto Cryptographic Denoising Technique'?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which paper was published first: 'Topology optimization of structures undergoing brittle fracture' or 'Classification Model for IDS Using Auto Cryptographic Denoising Technique'?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Which paper was published first: 'Topology optimization of structures undergoing brittle fracture' or 'Classification Model for IDS Using Auto Cryptographic Denoising Technique'?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 15,
  "task_name": "academia",
  "goal": "Is the article 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' from the same publication venue as 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs'? Please answer 'Yes' or 'No'.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is the article 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' from the same publication venue as 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs'? Please answer 'Yes' or 'No'.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Is the article 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' from the same publication venue as 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs'? Please answer 'Yes' or 'No'.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 16,
  "task_name": "academia",
  "goal": "Are the articles 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' and 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs' published in the same venue and in the same year? Please answer 'Yes' or 'No'.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Are the articles 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' and 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs' published in the same venue and in the same year? Please answer 'Yes' or 'No'.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Are the articles 'Road Traffic Forecast Based on Meteorological Information through Deep Learning Methods' and 'Dynamic Selection Techniques for Detecting GPS Spoofing Attacks on UAVs' published in the same venue and in the same year? Please answer 'Yes' or 'No'.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 17,
  "task_name": "academia",
  "goal": "Are 'Sliding Mode FTC of an Octoplane UAV transition mode' and 'Panoptic Visual Analytics of Eye Tracking Data' both conference papers? Please answer 'Yes' or 'No'.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Are 'Sliding Mode FTC of an Octoplane UAV transition mode' and 'Panoptic Visual Analytics of Eye Tracking Data' both conference papers? Please answer 'Yes' or 'No'.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Are 'Sliding Mode FTC of an Octoplane UAV transition mode' and 'Panoptic Visual Analytics of Eye Tracking Data' both conference papers? Please answer 'Yes' or 'No'.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 18,
  "task_name": "academia",
  "goal": "Who are the collaborators of Jay Leverett from the same organization as him? Please provide the names in the following format: ['author1', 'author2', ...]",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Who are the collaborators of Jay Leverett from the same organization as him? Please provide the names in the following format: ['author1', 'author2', ...]",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Who are the collaborators of Jay Leverett from the same organization as him? Please provide the names in the following format: ['author1', 'author2', ...]\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 19,
  "task_name": "academia",
  "goal": "Of Fred Zhang's collaborators, who are from different organizations than Fred Zhang? Please provide a list in the format: ['author1', 'author2', ...].",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Of Fred Zhang's collaborators, who are from different organizations than Fred Zhang? Please provide a list in the format: ['author1', 'author2', ...].",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: loadPaperNet()\nDescription: Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.\n\nName: loadAuthorNet()\nDescription: Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.\n\nName: neighbourCheck(graph, node)\nDescription: List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.\nParameters:\n- graph (Type: string, Enum: [PaperNet, AuthorNet]): The name of the graph to check\n- node (Type: string): The node for which neighbors will be listed\nReturns:\n- neighbors (Type: array)\n\nName: paperNodeCheck(node)\nDescription: Return detailed attribute information of a specified paper in PaperNet\nParameters:\n- node (Type: string): Name of the paper.\nReturns:\n- authors : The authors of the paper\n- year : The puslished year of the paper\n- venue : The published venue of the paper\n- n_citation : The number of citations of the paper\n- keywords : The keywords of the paper\n- doc_type : The document type of the paper\n\nName: authorNodeCheck(node)\nDescription: Return detailed attribute information of a specified author in AuthorNet\nParameters:\n- node (Type: string): name of the author.\nReturns:\n- name : The name of the author\n- org : The organization of the author\n\nName: authorEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a AuthorNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\n- papers : All papers that the two authors have co-authored\n\nName: paperEdgeCheck(node1, node2)\nDescription: Return detailed attribute information of the edge between two specified nodes in a PaperNet.\nParameters:\n- node1 (Type: string): The first node of the edge\n- node2 (Type: string): The second node of the edge\nReturns:\nNone\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n\nYou should perform actions to accomplish the goal: Of Fred Zhang's collaborators, who are from different organizations than Fred Zhang? Please provide a list in the format: ['author1', 'author2', ...].\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 20,
  "task_name": "movie",
  "goal": "Where was the director of Minions: The Rise of Gru born?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Where was the director of Minions: The Rise of Gru born?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Where was the director of Minions: The Rise of Gru born?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 21,
  "task_name": "movie",
  "goal": "Is the director of The Dark Knight the same as the director of Spider-Man: Across the Spider-Verse\uff1fAnswer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is the director of The Dark Knight the same as the director of Spider-Man: Across the Spider-Verse\uff1fAnswer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Is the director of The Dark Knight the same as the director of Spider-Man: Across the Spider-Verse\uff1fAnswer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 22,
  "task_name": "movie",
  "goal": "Avatar versus Forrest Gump, which has a higher rating? Please answer with Avatar or Forrest Gump.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Avatar versus Forrest Gump, which has a higher rating? Please answer with Avatar or Forrest Gump.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Avatar versus Forrest Gump, which has a higher rating? Please answer with Avatar or Forrest Gump.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 23,
  "task_name": "movie",
  "goal": "Did the movie 'How do you know' make a profit? Answer Yes or No.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Did the movie 'How do you know' make a profit? Answer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Did the movie 'How do you know' make a profit? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 24,
  "task_name": "movie",
  "goal": "In 'The Dark Knight' and 'The Pursuit of Happyness', which of the two movies had higher earnings?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "In 'The Dark Knight' and 'The Pursuit of Happyness', which of the two movies had higher earnings?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: In 'The Dark Knight' and 'The Pursuit of Happyness', which of the two movies had higher earnings?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 25,
  "task_name": "movie",
  "goal": "Does Top Gun: Maverick and Black Panther: Wakanda Forever share a common genre ? Answer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Does Top Gun: Maverick and Black Panther: Wakanda Forever share a common genre ? Answer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Does Top Gun: Maverick and Black Panther: Wakanda Forever share a common genre ? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 26,
  "task_name": "movie",
  "goal": "What character did Cate Blanchett play in Don't Look Up ?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "What character did Cate Blanchett play in Don't Look Up ?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: What character did Cate Blanchett play in Don't Look Up ?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 27,
  "task_name": "movie",
  "goal": "The actress who palyed Evelyn Wang in \"Everything Everywhere All at Once\", what role did she paly in \"Crouching Tiger, Hidden Dragon\"?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "The actress who palyed Evelyn Wang in \"Everything Everywhere All at Once\", what role did she paly in \"Crouching Tiger, Hidden Dragon\"?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: The actress who palyed Evelyn Wang in \"Everything Everywhere All at Once\", what role did she paly in \"Crouching Tiger, Hidden Dragon\"?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 28,
  "task_name": "movie",
  "goal": "Which movie was released earlier, Turning Red or Everything Everywhere All at Once?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which movie was released earlier, Turning Red or Everything Everywhere All at Once?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Which movie was released earlier, Turning Red or Everything Everywhere All at Once?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 29,
  "task_name": "movie",
  "goal": "Is Black Panther: Wakanda Forever a movie produced by Marvel Studios? Answer Yes or No.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is Black Panther: Wakanda Forever a movie produced by Marvel Studios? Answer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Is Black Panther: Wakanda Forever a movie produced by Marvel Studios? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 30,
  "task_name": "movie",
  "goal": "Is the movie 'Disenchanted' a Japanese film? Answer Yes or No.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is the movie 'Disenchanted' a Japanese film? Answer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Is the movie 'Disenchanted' a Japanese film? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 31,
  "task_name": "movie",
  "goal": "Are 'Disenchanted' and 'Lighting Up the Stars' movies from the same country? Answer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Are 'Disenchanted' and 'Lighting Up the Stars' movies from the same country? Answer Yes or No.",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Are 'Disenchanted' and 'Lighting Up the Stars' movies from the same country? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 32,
  "task_name": "movie",
  "goal": "What is the television debut directing of the director of 'Babylon'?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "What is the television debut directing of the director of 'Babylon'?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: What is the television debut directing of the director of 'Babylon'?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 33,
  "task_name": "movie",
  "goal": "Which year did the director of the movie 'Glass Onion: A Knives Out Mystery' win the America Award for Outstanding Directing \u2013 Drama Series?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which year did the director of the movie 'Glass Onion: A Knives Out Mystery' win the America Award for Outstanding Directing \u2013 Drama Series?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Which year did the director of the movie 'Glass Onion: A Knives Out Mystery' win the America Award for Outstanding Directing \u2013 Drama Series?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 34,
  "task_name": "movie",
  "goal": "May I ask, in which movie did Brad Pitt first gain attention?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "May I ask, in which movie did Brad Pitt first gain attention?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: May I ask, in which movie did Brad Pitt first gain attention?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 35,
  "task_name": "movie",
  "goal": "Who is the director of the film that Brad Pitt first gain attention?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Who is the director of the film that Brad Pitt first gain attention?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Who is the director of the film that Brad Pitt first gain attention?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 36,
  "task_name": "movie",
  "goal": "In the movie for which Michelle Yeoh won the Oscar for Best Actress, what role did Jamie Lee Curtis play?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "In the movie for which Michelle Yeoh won the Oscar for Best Actress, what role did Jamie Lee Curtis play?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: In the movie for which Michelle Yeoh won the Oscar for Best Actress, what role did Jamie Lee Curtis play?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 37,
  "task_name": "movie",
  "goal": "I am very interested in the actress who plays Wanda Maximoff in Doctor Strange in the Multiverse of Madness. What is her IMDB ID?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I am very interested in the actress who plays Wanda Maximoff in Doctor Strange in the Multiverse of Madness. What is her IMDB ID?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: I am very interested in the actress who plays Wanda Maximoff in Doctor Strange in the Multiverse of Madness. What is her IMDB ID?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 38,
  "task_name": "movie",
  "goal": "Brendan Fraser won the Academy Award for Best Actor in 2023. I would like to see the movie for which he won the award. What is its official Korean title?",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Brendan Fraser won the Academy Award for Best Actor in 2023. I would like to see the movie for which he won the award. What is its official Korean title?",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Brendan Fraser won the Academy Award for Best Actor in 2023. I would like to see the movie for which he won the award. What is its official Korean title?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 39,
  "task_name": "movie",
  "goal": "Jessica Chastain won the Academy Award for Best Actress in 2022. Please give you an overview in Dutch about the movie for which she won the award",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Jessica Chastain won the Academy Award for Best Actress in 2022. Please give you an overview in Dutch about the movie for which she won the award",
      "Observation": "Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_search_movie(movie_name)\nDescription: Search for a movie by name and return basic details\nParameters:\n- movie_name (Type: string): The name of the movie to search for.\nReturns:\n- id : The ID of the found movie.\n- overview : The overview description of the movie.\n- title : The title of the movie.\n\nName: get_movie_details(movie_id)\nDescription: Get detailed information about a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- budget : The budget of the movie.\n- genres : The genres of the movie.\n- revenue : The revenue of the movie.\n- vote_average : The average vote score of the movie.\n- release_date : The release date of the movie.\n\nName: get_movie_production_companies(movie_id)\nDescription: Get the production companies of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_companies : The production companies of the movie.\n\nName: get_movie_production_countries(movie_id)\nDescription: Get the production countries of a movie by its ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- production_countries : The production countries of the movie.\n\nName: get_movie_cast(movie_id)\nDescription: Retrieve the list of the top 10 cast members from a movie by its ID.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- cast : List of the top 10 cast members.\n\nName: get_movie_crew(movie_id)\nDescription: Retrieve the list of crew members (limited to 10) from a movie by its ID. The list primarily includes Director, Producer, and Writer roles.\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- crew : List of the top 10 of crew members\n\nName: get_movie_keywords(movie_id)\nDescription: Get the keywords associated with a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- keywords : The keywords associated with the movie.\n\nName: get_search_person(person_name)\nDescription: Search for a person by name.\nParameters:\n- person_name (Type: string): The name of the person to search for.\nReturns:\n- id : The ID of the found person.\n- name : The name of the person.\n\nName: get_person_details(person_id)\nDescription: Get detailed information about a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- biography : The biography of the person.\n- birthday : The birthday of the person.\n- place_of_birth : The place of birth of the person.\n\nName: get_person_cast(person_id)\nDescription: Retrieve the top 10 movie cast roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- cast : A list of movies where the person has acted, limited to top 10\n\nName: get_person_crew(person_id)\nDescription: Retrieve the top 10 movie crew roles of a person by their ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- crew : A list of movies where the person has participated as crew, limited to top 10\n\nName: get_person_external_ids(person_id)\nDescription: Get the external ids for a person by ID\nParameters:\n- person_id (Type: string): The ID of the person.\nReturns:\n- imdb_id : The IMDB id of the person.\n- facebook_id : The Facebook id of the person.\n- instagram_id : The Instagram id of the person.\n- twitter_id : The Twitter id of the person.\n\nName: get_movie_alternative_titles(movie_id)\nDescription: Get the alternative titles for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- titles : The alternative titles of the movie.\n- id : The ID of the movie.\n\nName: get_movie_translation(movie_id)\nDescription: Get the description translation for a movie by ID\nParameters:\n- movie_id (Type: string): The ID of the movie.\nReturns:\n- translations : The description translation of the movie.\n- id : The ID of the movie.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: When did the movie Scream 6 come out?\n\nAction: get_search_movie with Action Input: {\"movie_name\": \"Scream 6\"}\nObservation: {'id': 934433, 'overview': 'Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.', 'title': 'Scream VI'}\nAction: get_movie_details with Action Input: {\"movie_id\": \"934433\"}\nObservation: {'budget': 35000000, 'genres': [{'id': 27, 'name': 'Horror'}, {'id': 53, 'name': 'Thriller'}, {'id': 9648, 'name': 'Mystery'}], 'revenue': 168961389, 'vote_average': 7.175, 'release_date': '2023-03-08'}\nAction: finish with Action Input: {\"answer\": \"2023-03-08\"}\nObservation: 2023-03-08\n\nYou should perform actions to accomplish the goal: Jessica Chastain won the Academy Award for Best Actress in 2022. Please give you an overview in Dutch about the movie for which she won the award\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 40,
  "task_name": "weather",
  "goal": "What was the average temperature in Celsius yesterday? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "What was the average temperature in Celsius yesterday? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: What was the average temperature in Celsius yesterday? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 41,
  "task_name": "weather",
  "goal": "Today is really hot, it seems like it wasn't this hot last year. What was the highest temperature on this day last year? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Today is really hot, it seems like it wasn't this hot last year. What was the highest temperature on this day last year? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Today is really hot, it seems like it wasn't this hot last year. What was the highest temperature on this day last year? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 42,
  "task_name": "weather",
  "goal": "It's snowing outside today, it's so cold, what's the lowest temperature today? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "It's snowing outside today, it's so cold, what's the lowest temperature today? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: It's snowing outside today, it's so cold, what's the lowest temperature today? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 43,
  "task_name": "weather",
  "goal": "I want to wear short sleeves tomorrow. What is the average temperature tomorrow according to the weather forecast? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I want to wear short sleeves tomorrow. What is the average temperature tomorrow according to the weather forecast? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I want to wear short sleeves tomorrow. What is the average temperature tomorrow according to the weather forecast? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 44,
  "task_name": "weather",
  "goal": "Is the average temperature today higher than yesterday? Answer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Is the average temperature today higher than yesterday? Answer Yes or No.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Is the average temperature today higher than yesterday? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 45,
  "task_name": "weather",
  "goal": "Among the 20th, 25th, and 30th of this month, which day has the highest average temperature? Please provide the answer in the YYYY-MM-DD format.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Among the 20th, 25th, and 30th of this month, which day has the highest average temperature? Please provide the answer in the YYYY-MM-DD format.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Among the 20th, 25th, and 30th of this month, which day has the highest average temperature? Please provide the answer in the YYYY-MM-DD format.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 46,
  "task_name": "weather",
  "goal": "I'm going to Washington on a business trip the day after tomorrow. On the day after tomorrow, is the average temperature there higher than the average temperature here? Answer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I'm going to Washington on a business trip the day after tomorrow. On the day after tomorrow, is the average temperature there higher than the average temperature here? Answer Yes or No.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I'm going to Washington on a business trip the day after tomorrow. On the day after tomorrow, is the average temperature there higher than the average temperature here? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 47,
  "task_name": "weather",
  "goal": "I will be going to Los Angeles on a business trip on the 8th of next month. What is the temperature difference in Los Angeles on that day? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I will be going to Los Angeles on a business trip on the 8th of next month. What is the temperature difference in Los Angeles on that day? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I will be going to Los Angeles on a business trip on the 8th of next month. What is the temperature difference in Los Angeles on that day? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 48,
  "task_name": "weather",
  "goal": "I'm going to travel on the 3rd of next month, New York or Los Angeles, please help me choose a place where the temperature difference is not very big that day.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I'm going to travel on the 3rd of next month, New York or Los Angeles, please help me choose a place where the temperature difference is not very big that day.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I'm going to travel on the 3rd of next month, New York or Los Angeles, please help me choose a place where the temperature difference is not very big that day.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 49,
  "task_name": "weather",
  "goal": "On the 19th or the 25th, I want to choose a day to go hiking. Which day has less rainfall? Please provide the answer in the YYYY-MM-DD format.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "On the 19th or the 25th, I want to choose a day to go hiking. Which day has less rainfall? Please provide the answer in the YYYY-MM-DD format.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: On the 19th or the 25th, I want to choose a day to go hiking. Which day has less rainfall? Please provide the answer in the YYYY-MM-DD format.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 50,
  "task_name": "weather",
  "goal": "The recent rainfall has been quite substantial. It feels like there wasn't much rain last year. Is today's rainfall higher than last year's on the same day? Answer Yes or No.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "The recent rainfall has been quite substantial. It feels like there wasn't much rain last year. Is today's rainfall higher than last year's on the same day? Answer Yes or No.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: The recent rainfall has been quite substantial. It feels like there wasn't much rain last year. Is today's rainfall higher than last year's on the same day? Answer Yes or No.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 51,
  "task_name": "weather",
  "goal": "Which day had a greater amount of rainfall, the 7th of last month or the 20th of last month? Please provide the answer in the YYYY-MM-DD format.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which day had a greater amount of rainfall, the 7th of last month or the 20th of last month? Please provide the answer in the YYYY-MM-DD format.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Which day had a greater amount of rainfall, the 7th of last month or the 20th of last month? Please provide the answer in the YYYY-MM-DD format.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 52,
  "task_name": "weather",
  "goal": "Which year in the previous 3 years had the most snowfall on December 10th? Please provide the answer in the YYYY format.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Which year in the previous 3 years had the most snowfall on December 10th? Please provide the answer in the YYYY format.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Which year in the previous 3 years had the most snowfall on December 10th? Please provide the answer in the YYYY format.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 53,
  "task_name": "weather",
  "goal": "I'm going to Ulaanbaatar on a business trip. It is said that it is on a plateau. How much higher is the elevation there than here? Please give me a number as an answer.",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I'm going to Ulaanbaatar on a business trip. It is said that it is on a plateau. How much higher is the elevation there than here? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I'm going to Ulaanbaatar on a business trip. It is said that it is on a plateau. How much higher is the elevation there than here? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 54,
  "task_name": "weather",
  "goal": "I went to New York on a business trip on the 1st of this month. I feel that the air quality is not very good. How was the air quality level there that day?",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I went to New York on a business trip on the 1st of this month. I feel that the air quality is not very good. How was the air quality level there that day?",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I went to New York on a business trip on the 1st of this month. I feel that the air quality is not very good. How was the air quality level there that day?\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 55,
  "task_name": "weather",
  "goal": "I will be on a business trip to New York on the 1st of next month. How far is it from my current location? Please give me a number as an answer.",
  "difficulty": "easy",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I will be on a business trip to New York on the 1st of next month. How far is it from my current location? Please give me a number as an answer.",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I will be on a business trip to New York on the 1st of next month. How far is it from my current location? Please give me a number as an answer.\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 56,
  "task_name": "weather",
  "goal": "I'm going to New York on a business trip on the 11th. I'm not sure about the air there. Is the air quality level there the same as here today? Answer in Yes or No",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "I'm going to New York on a business trip on the 11th. I'm not sure about the air there. Is the air quality level there the same as here today? Answer in Yes or No",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: I'm going to New York on a business trip on the 11th. I'm not sure about the air there. Is the air quality level there the same as here today? Answer in Yes or No\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 57,
  "task_name": "weather",
  "goal": "On the 1st and the 22nd of next month, which days will have both rain and snow? Please provide the answer in the form of a list ['YYYY-MM-DD', ...].",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "On the 1st and the 22nd of next month, which days will have both rain and snow? Please provide the answer in the form of a list ['YYYY-MM-DD', ...].",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: On the 1st and the 22nd of next month, which days will have both rain and snow? Please provide the answer in the form of a list ['YYYY-MM-DD', ...].\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 58,
  "task_name": "weather",
  "goal": "Will tomorrow's snowfall decrease? Answer in Yes or No",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "Will tomorrow's snowfall decrease? Answer in Yes or No",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: Will tomorrow's snowfall decrease? Answer in Yes or No\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
{
  "id": 59,
  "task_name": "weather",
  "goal": "On the the 21st and 28th of this month, which days has more rainfall than snowfall? Please provide the answer in the form of a list ['YYYY-MM-DD',...].",
  "difficulty": "hard",
  "is_done": false,
  "progress_rate": 0.0,
  "grounding_acc": 0.0,
  "score_change_record": [],
  "trajectory": {
    "Interaction Turn 0": {
      "Goal": "On the the 21st and 28th of this month, which days has more rainfall than snowfall? Please provide the answer in the form of a list ['YYYY-MM-DD',...].",
      "Observation": "If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal."
    }
  },
  "example_prompt": "We detail name, description, input(parameters) and output(returns) of each action as follows:\nName: get_user_current_date()\nDescription: Get the user's current date.\nReturns:\nThe current date in 'YYYY-MM-DD' format.\n\nName: get_user_current_location()\nDescription: Get the user's current city.\nReturns:\nThe user's current city.\n\nName: get_historical_temp(latitude, longitude, start_date, end_date)\nDescription: Get historical temperature data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical temperature data.\n\nName: get_historical_rain(latitude, longitude, start_date, end_date)\nDescription: Get historical rainfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical rainfall data.\n\nName: get_historical_snow(latitude, longitude, start_date, end_date)\nDescription: Get historical snowfall data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical snowfall data.\n\nName: get_snow_forecast(latitude, longitude, start_date, end_date)\nDescription: Get snowfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nSnowfall forecast data.\n\nName: get_current_snow(latitude, longitude, current_date)\nDescription: Get current snowfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve snowfall data (YYYY-MM-DD).\nReturns:\nCurrent snowfall data.\n\nName: get_current_temp(latitude, longitude, current_date)\nDescription: Get current temperature data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve temperature data (YYYY-MM-DD).\nReturns:\nCurrent temperature data.\n\nName: get_latitude_longitude(name)\nDescription: Get latitude and longitude information for a specified location name.\nParameters:\n- name (Type: string): The name of the location. (e.g., city name)\nReturns:\nlatitude and longitude information for the specified location.\n\nName: get_elevation(latitude, longitude)\nDescription: Get elevation data for a specified location.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\nReturns:\nElevation data for the specified location.\n\nName: get_temp_forecast(latitude, longitude, start_date, end_date)\nDescription: Get temperature forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nTemperature forecast data.\n\nName: get_rain_forecast(latitude, longitude, start_date, end_date)\nDescription: Get rainfall forecast data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the forecast (YYYY-MM-DD).\n- end_date (Type: string): The end date of the forecast (YYYY-MM-DD).\nReturns:\nRainfall forecast data.\n\nName: get_current_rain(latitude, longitude, current_date)\nDescription: Get current rainfall data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve rainfall data (YYYY-MM-DD).\nReturns:\nCurrent rainfall data.\n\nName: get_distance(latitude1, longitude1, latitude2, longitude2)\nDescription: Calculate the distance between two sets of latitude and longitude coordinates.\nParameters:\n- latitude1 (Type: number): The latitude of the first location.\n- longitude1 (Type: number): The longitude of the first location.\n- latitude2 (Type: number): The latitude of the second location.\n- longitude2 (Type: number): The longitude of the second location.\nReturns:\nThe distance between the two sets of coordinates in kilometers.\n\nName: get_historical_air_quality_index(latitude, longitude, start_date, end_date)\nDescription: Get historical air quality index data for a specified location and date range.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- start_date (Type: string): The start date of the historical data (YYYY-MM-DD).\n- end_date (Type: string): The end date of the historical data (YYYY-MM-DD).\nReturns:\nHistorical air quality index (PM2.5) data.\n\nName: get_current_air_quality_index(latitude, longitude, current_date)\nDescription: Get current air quality index data for a specified location and date.\nParameters:\n- latitude (Type: number): The latitude of the location.\n- longitude (Type: number): The longitude of the location.\n- current_date (Type: string): The current date to retrieve air quality index data (YYYY-MM-DD).\nReturns:\nCurrent air quality index (PM2.5) data.\n\nName: get_air_quality_level(air_quality_index)\nDescription: Determine the air quality level based on the air quality index (AQI).\nParameters:\n- air_quality_index (Type: number): The air quality index (AQI) value.\nReturns:\nThe air quality level, which can be 'good', 'fair', 'moderate', 'poor', 'very poor', or 'extremely poor'.\n\nName: check_valid_actions()\nDescription: Get supported actions for current tool.\nReturns:\n- actions (Type: array): Supported actions for current tool.\n\nName: finish(answer)\nDescription: Return an answer and finish the task\nParameters:\n- answer (Type: ['string', 'number', 'array']): The answer to be returned\n\n\nIf you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong.\nIf you are finished, you will call \"finish\" action\nPlease refer to the format of examples below to solve the requested goal. Your response must be in the format of \"Action: [your action] with Action Input: [your action input]\"\nHere are examples:\nGoal: What is the lowest temperature yesterday?\n\nAction: get_user_current_location with Action Input: {}\nObservation: Shanghai\nAction: get_latitude_longitude with Action Input: {\"name\": \"Shanghai\"}\nObservation: {'results': [{'name': 'Shanghai', 'latitude': 31.22222, 'longitude': 121.45806, 'country_code': 'CN'}, {'name': 'Shanghai', 'latitude': 34.85009, 'longitude': -87.08501, 'country_code': 'US'}, {'name': 'Cornelia', 'latitude': 38.64363, 'longitude': -93.73938, 'country_code': 'US'}]}\nAction: get_user_current_date with Action Input: {}\nObservation: 2015-01-02\nAction: get_historical_temp with Action Input: {\"latitude\": 31.22222, \"longitude\": 121.45806, \"start_date\": \"2015-01-01\", \"end_date\": \"2015-01-01\"}\nObservation: {'latitude': 31.200005, 'longitude': 121.5, 'daily_units': {'time': 'iso8601', 'temperature_2m_max': '\u00b0C', 'temperature_2m_min': '\u00b0C', 'temperature_2m_mean': '\u00b0C'}, 'daily': {'time': ['2015-01-01'], 'temperature_2m_max': [4.3], 'temperature_2m_min': [-3.6], 'temperature_2m_mean': [-0.1]}}\nAction: finish with Action Input: {\"answer\": -0.1}\nObservation: -0.1\n\nYou should perform actions to accomplish the goal: On the the 21st and 28th of this month, which days has more rainfall than snowfall? Please provide the answer in the form of a list ['YYYY-MM-DD',...].\nYou should use the following commands for help when your action cannot be understood: check_valid_actions\nObservation: If you want to get the latitude and longitude information of a city, you must call \"get_latitude_longitude\", do not generate it by yourself which maybe wrong. Once you have finished the goal, please remember to take 'finish' action to end this goal.\nAction: "
}
